/*
 *	This grammar is a bit chaotic because of some extra constraints from the build_ast and ambiguities.
 *	For more info about the grammar syntax see https://lezer.codemirror.net/docs/guide/#writing-a-grammar
 *
 *	Mainly, some excess wrapping is used such that the builder can enter/leave these nodes (e.g. Generic_types).
 */

@top Program { (Binding | Datatype)* }

kw<term> { @specialize[@name={term}]<Identifier, term> }

Datatype { kw<"data"> Identifier Generic_types{Identifier*} "=" Constructors }
Constructors { Constructor ("|" Constructor)* }
Constructor { Identifier Subconstructors ~con }
Subconstructors { Subconstructor*}
Subconstructor { ~con Identifier | "(" Identifier+ ")" }

Binding { Identifier "=" heap_object }

heap_object { FUN_obj | CON_obj | THUNK_obj | PAP_obj }
FUN_obj { kw<"FUN"> "(" FUN_args { Identifier+ } "->" expression ")" }
CON_obj {
	kw<"CON"> "(" Identifier CON_fields { atom+ } ")" |
	kw<"CON"> Identifier
}
THUNK_obj { kw<"THUNK"> "(" expression ")" }
PAP_obj { kw<"PAP"> "(" Call ")"}

expression {
	atom |
	Call |
	Primop |
	Let_expr |
	Letrec_expr |
	Case_expr
}

Let_expr { kw<"let"> Let_binds kw<"in"> expression }
Letrec_expr { kw<"letrec"> Let_binds kw<"in"> expression }
Let_binds { Binding+ }

Case_expr {	kw<"case"> expression kw<"of"> "{" Alts {alts} "}"}
alts { Alternative ";"? | Alternative ";" alts }
Alternative { Identifier Pattern_binds "->" expression}
Pattern_binds { Identifier* }

Call { Identifier Call_args }
Call_args { atom+ }

Op<expr> { expr }
Primop { atom Operator atom }
Operator { Op<"+#"> | Op<"-#"> | Op<"*#"> | Op<"/#"> | Op<"%#"> |
Op<">=#"> | Op<">#"> | Op<"==#"> | Op<"<#"> | Op<"<=#"> | Op<"!=#"> }
atom { Identifier | Literal }

@tokens {
	Identifier { $[a-zA-Z_]$[a-zA-Z_0-9]* }
	Literal { ("0"|$[1-9]$[0-9]*)("."$[0-9]+)? }
	LineComment { "--" ![\n]* }
	space { $[ \t\n\r]+ }
	"(" ")" "=" "->" "|" "{" "}" ";"
}

@skip { space | LineComment }

@external propSource stgHighlight from "./highlight"