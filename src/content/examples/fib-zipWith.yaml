
name: Fibonacci zipWith
code: |2
  data Number a = Num a
  data Boolean = True | False
  data List a = Nil | Cons a (List a)
  nil = CON Nil
  plusInt = FUN(x y -> 
    case x of {
      Num i -> case y of {
        Num j -> case  i +# j of {
            x -> let result = CON(Num x)
              in result;
          };
        };
    }
  )
  zipWith = FUN(f x y -> 
    case x of {
      Nil  -> nil;
      Cons hx tx -> case y of {
        Nil  -> nil;
        Cons hy ty -> let fxy = THUNK(f hx hy)
                          fxys = THUNK(zipWith f tx ty)
                          zippedList = CON(Cons fxy fxys)
                        in zippedList;
        };
    }
  )
  forcen = FUN(n list -> 
    case  n ># 0 of {
      False  -> nil;
      True  -> case list of {
                Nil  -> nil;
                Cons h t -> case h of {
                  x -> case  n -# 1 of {
                    n -> case forcen n t of {
                      y -> let result = CON(Cons x y)
                          in result;
                      };
                    };
                  };
                };
    }
  )
  zero = CON(Num 0)
  one = CON(Num 1)
  fib = THUNK(letrec	fib0 = CON(Cons zero fib1)
                      fib1 = CON(Cons one fib2)
                      fib2 = THUNK(zipWith plusInt fib0 fib1)
              in fib0)
  main = THUNK(forcen 10 fib)
