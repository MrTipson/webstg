---
import { program } from "@/stglang/types";
import { simulate } from "@/stgmachine/machine";
import Step from "@/components/Step.astro";
interface Props {
	prog: program;
	title: string;
	steps: number;
	eval_apply?: boolean;
	garbage_collection?: boolean;
}
let { prog, title, steps, eval_apply, garbage_collection } = Astro.props;
let simulated = simulate(prog, steps, eval_apply, garbage_collection);
---

<div class="flex h-full font-semibold">
	<div class="w-[30%] box-border p-4 sticky h-full flex flex-col">
		<h1 class="text-2xl">{title}</h1>
		<pre class="bg-accent px-2 py-1 overflow-auto"><code>{prog}</code></pre>
	</div>
	<div class="steps flex-grow p-4 h-full overflow-auto">
		{
			simulated.map((step, i) => (
				<div class="pt-4" id={"step" + i}>
					<span>Step {i}</span>
					<Step
						expr={step.expr}
						env={step.env}
						heap={step.heap}
						stack={step.stack}
						rule={step.rule}
					/>
				</div>
			))
		}
	</div>
</div>

<style is:global>
	pre {
		@apply rounded-lg;
	}
</style>

<script>
	let steps = document.getElementsByClassName("steps")[0].children.length;
	document.onkeydown = function (event) {
		let hash = document.location.hash || "#step0";
		let num = Number(hash.substring(5));
		if (event.key == "ArrowLeft") {
			num = num > 0 ? num - 1 : num;
		} else if (event.key == "ArrowRight") {
			num = num < steps - 1 ? num + 1 : num;
		}
		document.location = `#step${num}`;
	};
</script>
