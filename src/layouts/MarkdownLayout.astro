---
import Layout from "@/layouts/Layout.astro";
import "@/styles/syntax.css";
import "@/styles/react_flow_overrides.css";
import "@/styles/markdown.css";
import type { MarkdownHeading } from "astro";
import type { SidebarEntry } from "@/content/directory";
import { List } from "lucide-react";

interface Props {
	title: string;
	description: string;
	headings: MarkdownHeading[];
	sidebar: SidebarEntry[];
}
const { title, description, headings, sidebar } = Astro.props;
const tocPaddings = [undefined, "pl-0", "pl-4", "pl-8", "pl-8", "pl-8", "pl-8"];
const linkStyle = "no-underline block text-muted-foreground ml-8 hover:text-foreground";
const detailsStyle = "pl-2 ml-6";

function constructSidebar(sidebar: SidebarEntry[]): string {
	return sidebar
		.map((entry) => {
			if ("link" in entry) {
				return `<a class="${linkStyle}" href=${entry.link}>${entry.label}</a>`;
			} else if ("items" in entry) {
				return `
				<details class="${detailsStyle}" open=${!entry.collapsed}>
					<summary class="hover:text-foreground">${entry.label}</summary>
					<div>${constructSidebar(entry.items)}</div>
				</details>`;
			}
		})
		.join("");
}
---

<Layout title={title} description={description}>
	<div class="columns">
		<nav id="sidebar" class="sidebar">
			<div class="sidebarPullMark"><List/></div>
			<div class="sidebarContent scrollbar" set:html={constructSidebar(sidebar)}/>
		</nav>
		<main class="content scrollbar md">
			<slot />
		</main>
		<aside class="toc scrollbar">
			{headings.length > 0 && <h3 class="mx-0">Contents</h3>}
			{
				headings.map((x) => (
					<a
						class={`block ${tocPaddings[x.depth]} text-muted-foreground hover:text-foreground`}
						href={"#" + x.slug}
					>
						{x.text}
					</a>
				))
			}
		</aside>
	</div>
</Layout>

<style>
	.sidebar {
		@apply fixed top-0 bottom-0 z-10 bg-secondary motion-reduce:transition-none -translate-x-full max-w-[80%];
	}
	.sidebar.open {
		@apply border-r border-muted-foreground/50 translate-x-0 transition-all;
	}
	.sidebarContent {
		@apply col-span-1 p-4 text-muted-foreground no-underline overflow-auto h-full;
	}
	.sidebarPullMark {
		@apply top-20 block absolute left-full p-2 bg-secondary z-10 border-t border-r border-b border-muted-foreground/50;
	}
	.columns {
		@apply relative flex h-full flex-col-reverse overflow-auto scroll-pt-2;
	}
	.content {
		@apply relative grow shrink px-12 scroll-pt-2;
	}
	.toc {
		@apply shrink px-12 pt-12;
	}
	.scrollbar {
		scrollbar-width: 4px;
		scrollbar-color: var(--muted) var(--muted-foreground);
	}
	.scrollbar::-webkit-scrollbar {
		@apply w-3 m-1;
	}
	.scrollbar::-webkit-scrollbar-thumb {
		@apply bg-muted-foreground;
	}
	.scrollbar::-webkit-scrollbar-track {
		@apply bg-muted;
	}

	@media screen(md) {
		.sidebar {
			@apply static shrink bg-inherit shadow-none transform-none;
		}
		.sidebarPullMark {
			@apply hidden;
		}
		.sidebarContent {
			@apply pt-12;
		}
		.columns {
			@apply flex-row overflow-hidden;
		}
		.content {
			@apply overflow-auto;
		}
		.toc {
			@apply px-4 overflow-auto;
		}
	}
</style>
<style is:global>
	details { @apply text-muted-foreground border-l border-muted-foreground pl-2 }
	summary { @apply cursor-pointer relative }
	summary::before { @apply content-[''] border-muted-foreground absolute top-0 bottom-0 -left-8 w-2 h-2 my-auto border-b border-r -rotate-45 transition-transform duration-200 }
	details[open] summary::before { @apply rotate-45 }
	summary::marker { @apply content-none }
</style>

<script>
const sidebar = document.getElementById("sidebar");
document.querySelector(".sidebarPullMark")?.addEventListener("click", () => sidebar?.classList.toggle("open"));
</script>
