---
// Adjusted example from https://github.com/johnzanussi/astro-mdx-code-blocks
import { Code } from "astro:components";
import { Check, Copy } from "lucide-react";
import { Button } from "@/components/ui/button";
import { classHighlighter, highlightCode } from "@lezer/highlight";
import { parser } from "@/stglang/parser";

const { code, lang, filename } = Astro.props;

const hasLang = !!lang;
const isStgLang = lang === "stg";
const hasFileName = !!filename;

const showHeader = hasLang || hasFileName;

function highlightSTG(program: string) {
	const children: any[] = [];

	function emit(text: string, classes: string) {
		children.push(`<span class=${classes}>${text}</span>`);
	}
	function emitBreak() {
		children.push(`<span>\n</span>`);
	}

	highlightCode(
		program,
		parser.parse(program),
		classHighlighter,
		emit,
		emitBreak,
	);
	return children.join("");
}
---

<div>
	{
		showHeader && (
			<div class="header">
				{hasLang && <span class="lang">{lang}</span>}
				{hasFileName && <span class="filename">{filename}</span>}
			</div>
		)
	}
	<div class="relative">
		{
			isStgLang ? (
				<pre class="codeBlock"><code set:html={highlightSTG(code.replaceAll('\r',''))} /></pre>
			) : (
				<Code
					code={code}
					lang={lang || "plaintext"}
					class="codeBlock"
				/>
			)
		}
		<Button size={"icon"} variant={"outline"} className="copyCode">
			<Copy size={20} className="copyIcon" />
			<Check className="checkIcon" />
		</Button>
	</div>
</div>

<style>
	.header {
		@apply bg-muted relative p-1;
	}
	.lang {
		@apply px-1 py-0.5 m-0.5 text-xs text-muted-foreground;
	}
	.filename {
		@apply italic font-mono;
	}
	.codeBlock {
		@apply w-full overflow-auto pr-14 min-h-14;
	}
	.copyCode {
		@apply absolute top-2 right-2;
	}
	.copyIcon {
		@apply absolute pointer-events-none;
	}
	.checkIcon {
		@apply text-green-500 absolute opacity-0 pointer-events-none;
	}
	button.copied > .copyIcon {
		@apply animate-ping repeat-1 fill-mode-forwards duration-500;
	}
	button.copied > .checkIcon {
		@apply transition-opacity duration-500 opacity-100;
	}
</style>

<script>
	const buttons = document.querySelectorAll("button.copyCode");

	buttons.forEach((button) => {
		button.addEventListener("click", async (e) => {
			const target = e.target as HTMLButtonElement;
			const codeBlock = target.parentElement?.querySelector(".codeBlock");
			if (codeBlock) {
				const code = (codeBlock as HTMLDivElement).innerText;
				await navigator.clipboard.writeText(code);
				target.classList.add("copied");
				setTimeout(() => target.classList.remove("copied"), 2000);
			}
		});
	});
</script>
